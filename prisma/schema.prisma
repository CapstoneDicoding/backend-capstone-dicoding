generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CV_status {
  accepted
  denied
  queuing
}

enum Roles {
  candidate
  recruiter
}

model Users {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  password   String       @db.VarChar(255)
  fullname   String
  photo_path String
  role       Roles
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  candidates Candidates[]
  companies  Companies[]
}

model Candidates {
  id                Int                 @id @default(autoincrement())
  user_id           Int
  user              Users               @relation(fields: [user_id], references: [id])
  email             String
  notelp            String
  skills            Json
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  curriculum_vitaes Curriculum_vitaes[]
}

model Companies {
  id          Int       @id @default(autoincrement())
  user_id     Int
  user        Users     @relation(fields: [user_id], references: [id])
  location    String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  Jobs        Jobs[]
}

model Jobs {
  id                Int                 @id @default(autoincrement())
  name              String
  business_sector   String
  requirements      String
  candidate_needed  Int
  company           Companies           @relation(fields: [company_id], references: [id])
  company_id        Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  curriculum_vitaes Curriculum_vitaes[]
}

model Curriculum_vitaes {
  id                 Int        @id @default(autoincrement())
  original_cv_path   String
  summarized_cv_path String?
  accuracy           Int
  status             CV_status
  candidate          Candidates @relation(fields: [candidate_id], references: [id])
  candidate_id       Int
  job                Jobs       @relation(fields: [job_id], references: [id])
  job_id             Int
  createdAt          DateTime   @default(now())
  updatedAt          DateTime?  @updatedAt
}
